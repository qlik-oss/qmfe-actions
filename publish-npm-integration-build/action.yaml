name: "Publish an NPM integration build"
description: "Publishes an integration build to the configured package registry"
author: "egill.sveinbjornsson@qlik.com"

inputs:
  build-script:
    description: "The full command to build the projects NPM package. Example: 'npm run build'"
    required: false
  dist-folder:
    description: "Name of the folder to publish"
    required: false
  enforce-types:
    description: "Whether to enforce the inclusion of type declarations in the package"
    required: false
    default: "true"
  dry-run:
    description: "Skips the actual publishing steps, mainly for testing the action"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Generate integration version value
      shell: bash
      run: |
        set -o pipefail
        _sha=${_sha:=$SHA}
        # Unshallow git repository. Do not fail in case the repository is already unshallowed.
        git fetch --prune --unshallow || true

        # git-describe - Give an object a human readable name based on an available ref
        # On PR actions/checkout checkouts a merge commit instead of commit sha, git describe
        # returns merge commit. To avoid this unpredictable commit sha, we will describe
        # the actual commit
        git_rev=$(git describe --tags --abbrev=7 ${_sha} --match "v[0-9]*.[0-9]*.[0-9]*")

        # If git revision is not an exact semver tag, then bump patch
        # An exact semver does not contain a '-'
        if [[ "$git_rev" == *-* ]]; then
          # Transforms 0.0.0-0-g1234abc to 0.0.1-0.g123abc
          git_rev=$(echo $git_rev | perl -ne 'm/(^v\d+\.\d+\.)(\d+)(.*)(\-g)(.*$)/ && print $1 . int(1+$2) . $3 . ".g" . $5')
        fi
        # If no version is returned from git describe, generate one
        [ -z "$git_rev" ] && git_rev="v0.0.0-0.g${_sha:0:7}"
        
        # Return Version without v prefix
        VER=${git_rev#v}
        # On tag push that matches refs/tags/v*.*.*, use that version regardless of git describe
        if echo "$GITHUB_REF" | grep -E 'refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$'; then
            VER=${GITHUB_REF#*/v}
            RELEASE_TAG="1"
        fi

        echo "Set version: ${VER}"
        if (echo $VER | egrep -- '-[0-9a-z.]+$' 1> /dev/null); then
          npm version $VER --no-git-tag-version
        fi

    - name: Run build script
      shell: bash
      if: ${{ inputs.build-script }}
      run: ${{ inputs.build-script }}

    - name: Publish integration package
      shell: bash
      run: |
        if [[ "${{ inputs.enforce-types }}" = "true" ]]; then
          # make sure we have .d.ts files in our package
          DTS=`npm publish ${{ inputs.dist-folder }} --dry-run --ignore-script 2>&1 | grep d.ts | wc -l`
          echo "# of *.d.ts files is $DTS"
          if [[ $DTS -eq 0 ]]; then
            echo "Missing *.d.ts files"
            exit 1
          fi
        fi

        if [[ "${{ inputs.dry-run }}" = "true" ]]; then
          echo "#### NPM PUBLISH DRY RUN ####"
          npm publish ${{ inputs.dist-folder }} --dry-run --ignore-script --tag next
        else
          npm publish ${{ inputs.dist-folder }} --ignore-script --tag next
          echo "Package was successfully published"
        fi
